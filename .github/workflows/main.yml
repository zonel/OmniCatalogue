name: Main Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:
  release:
    types: [created]

jobs:
  build-test-lint:
    runs-on: ubuntu-latest
    env:
      NODE_ENV: development

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install Frontend Dependencies
        working-directory: ./src/OmniCatalogue.Frontend
        run: npm install

      - name: Build Frontend
        working-directory: ./src/OmniCatalogue.Frontend
        run: npm run build

      - name: Run ESLint
        working-directory: ./src/OmniCatalogue.Frontend
        run: npm run lint
        continue-on-error: true

      - name: Set up .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - name: Install Backend Dependencies
        working-directory: ./src/OmniCatalogue.Backend
        run: dotnet restore

      - name: Build Backend
        working-directory: ./src/OmniCatalogue.Backend
        run: dotnet build --configuration Release

  snyk-scan:
    runs-on: ubuntu-latest
    needs: build-test-lint

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Snyk Test Frontend
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          command: code test

      - name: Snyk Test Backend
        uses: snyk/actions/dotnet@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          command: code test

  docker-build-and-release:
    runs-on: ubuntu-latest
    needs: [build-test-lint, snyk-scan]

    if: github.event_name == 'release'

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Docker Image (Frontend)
        run: |
          docker build -t omnicatalogue-frontend -f src/OmniCatalogue.Frontend/Dockerfile .
          docker save omnicatalogue-frontend -o omnicatalogue-frontend.tar

      - name: Build Docker Image (Backend)
        run: |
          docker build -t omnicatalogue-backend -f src/OmniCatalogue.Backend/Dockerfile .
          docker save omnicatalogue-backend -o omnicatalogue-backend.tar

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.event.release.tag_name }}
          name: ${{ github.event.release.name }}
          body: ${{ github.event.release.body }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Docker Images to Release (Frontend)
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./omnicatalogue-frontend.tar
          asset_name: omnicatalogue-frontend.tar
          asset_content_type: application/x-tar

      - name: Upload Docker Images to Release (Backend)
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./omnicatalogue-backend.tar
          asset_name: omnicatalogue-backend.tar
          asset_content_type: application/x-tar
