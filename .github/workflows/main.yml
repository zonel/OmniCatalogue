name: Main Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  build-test-lint:
    runs-on: ubuntu-latest
    env:
      NODE_ENV: development

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install Frontend Dependencies
        working-directory: ./src/OmniCatalogue.Frontend
        run: npm install

      - name: Build Frontend
        working-directory: ./src/OmniCatalogue.Frontend
        run: npm run build

      - name: Run ESLint
        working-directory: ./src/OmniCatalogue.Frontend
        run: npm run lint
        continue-on-error: true

      - name: Set up .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - name: Install Backend Dependencies
        working-directory: ./src/OmniCatalogue.Backend
        run: dotnet restore

      - name: Build Backend
        working-directory: ./src/OmniCatalogue.Backend
        run: dotnet build --configuration Release

  snyk-scan:
    runs-on: ubuntu-latest
    needs: build-test-lint

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Snyk Test Frontend
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          command: code test
        continue-on-error: true

      - name: Snyk Test Backend
        uses: snyk/actions/dotnet@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          command: code test
        continue-on-error: true

  docker-compose-build-and-test:
    runs-on: ubuntu-latest
    needs: [build-test-lint, snyk-scan]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/$(curl -s https://api.github.com/repos/docker/compose/releases/latest | jq -r .tag_name)/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and Run Services with Docker Compose
        run: docker-compose -f docker-compose.yml up --build -d

      - name: Test Application Health
        run: |
          curl -f http://localhost:5106 || exit 1
          curl -f http://localhost:5173 || exit 1

      - name: Tear Down Docker Compose
        run: docker-compose -f docker-compose.yml down
